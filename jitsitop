#!/usr/bin/python3
#
# Very simple jitsi top displaying some statistics from the jvb
#

import requests, time, datetime, tzlocal, pprint, curses, socket, curses.panel
import psutil

class titlebar:
   def __init__(self, screen):
      self.screen = screen

      maxy, maxx = self.screen.getmaxyx()
      self.window = curses.newwin(1, maxx + 1, 0, 0)
      self.panel = curses.panel.new_panel(self.window)

   def left(self, text):
      self.window.addstr(0, 0, text)

   def right(self, text):
      maxy, maxx = self.window.getmaxyx()
      self.window.addstr(0, maxx - 1 - len(text), text)

   def refresh(self):
      self.window.refresh()

class window:
   def __init__(self, screen, title, x, y):
      self.screen = screen
      self.title = title
      self.items = {}

      width = 0
      height = 0
      if self.title != "":
         width = len(self.title) + 5
         height = 2
      self.window = curses.newwin(height, width, y, x)
      self.panel = curses.panel.new_panel(self.window)
      if self.title != "":
         self.window.border()
         self.window.addstr(0, 3, self.title)

   def item(self, item, value):
      maxy, maxx = self.window.getmaxyx()

      self.items[item] = value
      y = maxy
      if (len(self.items) + 2) > maxy:
         y = len(self.items) + 2

      kmax=0
      vmax=0
      for key,val in self.items.items():
         if len(key) > kmax:
            kmax = len(key)
         if len(val) > vmax:
            vmax = len(val)
      x = kmax + vmax + 3
      if x < maxx:
         x = maxx

      if (x > maxx) or (y > maxy):
         self.window.resize(y, x)
         self.window.erase()
         self.window.border()
         self.window.addstr(0, 3, self.title)
         maxx = x
         maxy = y

      y = 1
      for key,val in self.items.items():
         self.window.addstr(y, 1, key)
         self.window.addstr(y, maxx - len(val) - 1, val)
         y += 1

   def refresh(self):
      self.window.refresh()

def main(screen):
   resp = requests.get('http://127.0.0.1:8080/about/version')
   version = resp.json()
   
   # Initialise curses
   curses.noecho() # no key echo
   curses.cbreak() # unbuffered keys
   curses.curs_set(0) # hide cursor
   screen.timeout(5000)

   # Initialise windows
   maxy, maxx = screen.getmaxyx()

   title = titlebar(screen)

   confstats = window(screen, "Conferences", 0, 2)
   clients = window(screen, "Clients", 30, 2)
   netstats = window(screen, "Network", 0, 11)
   icestats = window(screen, "ICE", 30, 13)
   totalstats = window(screen, "Totals", 0, 18)
   confsize = window(screen, "Conference sizes", 50, 2)
   serverinfo = window(screen, "Server", 30, 9)

   localtz = tzlocal.get_localzone()
   hostname = socket.getfqdn()

   stop=0
   
   screen.refresh()
   while not stop:
      resp = requests.get('http://127.0.0.1:8080/colibri/stats')
      if resp.status_code != 200:
         # This means something went wrong.
         raise ApiError('GET /colibri/stats/ {}'.format(resp.status_code))
      data = resp.json()
      resp = requests.get('http://localhost:5280/status?domain=meeting.kramsolutions.nl')
      #if resp.status_code != 200:
      #   # This means something went wrong.
      #   raise ApiError('GET /status {}'.format(resp.status_code))
      #rooms = resp.json()
   
      updatestamp = datetime.datetime.strptime(data['current_timestamp'] + " +0000", '%Y-%m-%d %H:%M:%S.%f %z').astimezone(localtz)
   
      title.left("%s (%s)" % (hostname, data['version']))
      title.right("Update: %s" % "{:%Y/%m/%d %H:%M:%S}".format(updatestamp))
      title.refresh()

      #if len(rooms) > 0:
      #   for r in rooms[0][0]:
      #      print(r['roomjid'])
      #      print(r['roomname'])
      #      print(r['NBparticipant'])
      #      for p in r['participant']:
      #         print(p['role'])
      #         print(p['display_name'])
      #         print(p['videomuted'])
      #         print(p['audiomuted'])
      #         print(p['jid'])

      confstats.item("Active", "% 3d" % data['conferences'])
      confstats.item("Inactive", "% 3d" % data['inactive_conferences'])
      confstats.item("Largests", "% 3d" % data['largest_conference'])
      confstats.item("Peer 2 peer", "% 3d" % data['p2p_conferences'])
      confstats.item("Video streams", "% 3d" % data['videostreams'])
      confstats.item("Video channels", "% 3d" % data['videochannels'])
      confstats.refresh()
   
      netstats.item("Download", "% 6.2fMbps" % (data['bit_rate_download']/1024))
      netstats.item("Download loss", "% 6.2f%%" % (data['loss_rate_download']*100))
      netstats.item("Upload", "% 6.2fMbps" % (data['bit_rate_upload']/1024))
      netstats.item("Upload loss", "% 6.2f%%" % (data['loss_rate_upload']*100))
      netstats.item("Avg RTT", "% 6dms" % data['rtt_aggregate'])
      netstats.refresh()

      icestats.item("Succeed", "% 3d" % data['total_ice_succeeded'])
      icestats.item("Relayed", "% 3d" % data['total_ice_succeeded_relayed'])
      icestats.item("Failed", "% 3d" % data['total_ice_failed'])
      icestats.refresh()

      totalstats.item("Conferences", "% 3d" % data['total_conferences_created'])
      totalstats.item("Partially failed", "% 3d" % data['total_partially_failed_conferences'])
      totalstats.item("Failed", "% 3d" % data['total_failed_conferences'])
      totalstats.item("Completed", "% 3d" % data['total_conferences_completed'])
      totalstats.item("Clients", "% 3d" % data['total_participants'])
      tcf=int(data['total_conference_seconds'])
      days=tcf // 86400
      tcf-=days * 86400
      hrs=tcf // 3600 
      tcf-=hrs * 3600
      min=tcf // 60
      sec=tcf - min * 60
      totalstats.item("Time", "% 2dd %02d:%02d:%02d" % (days, hrs, min, sec))
      totalstats.item("Speaker changes", "%s" % data['total_dominant_speaker_changes'])
      totalstats.refresh()

      count = 0
      confs = data['conferences']
      if confs == 0:
         confs = 1
      for size in data['conference_sizes']:
         if count > 1:
            confsize.item("% 2s" % str(count), "%10s %3.0f%% % 2d" % (int(size/confs*10)*"=", (size/confs*100), size))
         count += 1
      confsize.refresh()

      serverinfo.item("CPU", "% 5.1f%%" % psutil.cpu_percent())
      serverinfo.item("Threads", str(data['threads']))
      serverinfo.refresh()

      clients.item("Total","% 3d" % data['participants'])
      clients.item("Inactive", str(data['inactive_endpoints']))
      clients.item("Receive only", str(data['receive_only_endpoints']))
      clients.item("Sending audio", str(data['endpoints_sending_audio']))
      clients.item("Sending video", str(data['endpoints_sending_video']))
      clients.refresh()

      key = screen.getch()
      if key == ord("q"):
         stop = 1
      elif key == curses.KEY_RESIZE: # window resized
         screen.erase()

curses.wrapper(main)
